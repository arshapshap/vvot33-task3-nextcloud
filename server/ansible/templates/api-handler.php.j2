<?php
header('Content-Type: application/json');
header("Access-Control-Allow-Origin: {{ domain }}");
header("Access-Control-Allow-Methods: POST");
header("Access-Control-Allow-Headers: Content-Type");

require 'vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

function sendProjectEmail($email, $projectName, $password) {
    $mail = new PHPMailer(true);
    $projectUrl = "https://{$projectName}.{{ domain }}";

    try {
        $mail->isSMTP();
        $mail->Host = '{{ smtp_host }}';
        $mail->SMTPAuth = true;
        $mail->Username = '{{ smtp_email }}';
        $mail->Password = '{{ smtp_password }}';
        $mail->SMTPSecure = '{{ smtp_secure }}';
        $mail->Port = {{ smtp_port }};

        $mail->setFrom('{{ smtp_email }}', 'NextCloud AutoCreate');
        $mail->addAddress($email);

        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);
        $mail->Subject = "Your New NextCloud Project: {$projectName}";

        $htmlContent = "
            <h1>Project Credentials</h1>
            <p>Your NextCloud instance is ready!</p>
            <table>
                <tr><td>URL:</td><td><a href='{$projectUrl}'>{$projectUrl}</a></td></tr>
                <tr><td>Login:</td><td>{$email}</td></tr>
                <tr><td>Password:</td><td><code>{$password}</code></td></tr>
            </table>
            <p style='color: red'>This project will be automatically deleted after {{ project_expiration_time_mins }} minutes</p>
        ";

        $mail->Body = $htmlContent;
        $mail->AltBody = strip_tags($htmlContent);

        return $mail->send();
    } catch (Exception $e) {
        throw new Exception("Mail Error: {$mail->ErrorInfo}");
   }
}

function scheduleProjectDestruction($projectName) {
    $scriptPath = '/home/ubuntu/nextcloud/destroy_project.sh';

    if (!file_exists($scriptPath)) {
        throw new Exception("Script not found: $scriptPath");
    }

    $destroy_command = sprintf(
        'sudo -u ubuntu %s %s',
        escapeshellcmd($scriptPath),
        escapeshellarg($projectName)
    );

    $command = sprintf(
        'sudo /usr/bin/at now + {{ project_expiration_time_mins }} min <<< "%s"',
        escapeshellcmd($destroy_command)
    );
    exec($command);
}

function generatePassword($length = 12) {
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+';
    $password = '';

    $charsLength = strlen($chars);
    for ($i = 0; $i < $length; $i++) {
        $password .= $chars[random_int(0, $charsLength - 1)];
    }

    return $password;
}

$response = ['success' => false, 'message' => '', 'debug' => []];

try {
    $input = json_decode(file_get_contents('php://input'), true);

    $response['debug']['received_data'] = $input;

    if (empty($input['project_name']) || empty($input['email'])) {
        throw new Exception('All fields are required');
    }

    $projectName = trim($input['project_name']);
    $email = trim($input['email']);
    $password = generatePassword(12);

    if (!preg_match('/^[a-zA-Z0-9_-]*$/', $projectName)) {
        throw new Exception('The project name can only consist of Latin letters, numbers, hyphens, and underscores');
    }

    if (!preg_match('/^[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z0-9]$/', $projectName)) {
        throw new Exception('The project name must begin with a letter and end with a letter or a number');
    }

    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        throw new Exception('Invalid email format');
    }

    $scriptPath = '/home/ubuntu/nextcloud/create_project.sh';

    if (!file_exists($scriptPath)) {
        throw new Exception("Script not found: $scriptPath");
    }

    $command = sprintf(
        'sudo -u ubuntu %s %s %s %s 2>&1',
        escapeshellcmd($scriptPath),
        escapeshellarg($projectName),
        escapeshellarg($email),
        escapeshellarg($password)
    );

    $response['debug']['full_command'] = $command;

    exec($command, $output, $returnCode);

    $response['debug'] += [
        'output' => $output,
        'return_code' => $returnCode,
    ];

    if ($returnCode !== 0) {
        $errorLines = array_filter($output, function($line) {
            return preg_match('/error|already exists|failed|invalid/i', $line);
        });

        $cleanError = $errorLines ? end($errorLines) : 'Unknown error';
        $cleanError = preg_replace('/^(.*?:(\\s+|\\d+:))+/', '', $cleanError);

        throw new Exception(trim($cleanError));
    }

    if (!sendProjectEmail($email, $projectName, $password)) {
        throw new Exception('Failed to send credentials to email');
    }

    scheduleProjectDestruction($projectName);

    $response = [
        'success' => true,
        'message' => 'Project created successfully',
        'domain' => '{{ domain }}',
        'project' => $projectName,
        'output' => $output
    ];

} catch (Exception $e) {
    http_response_code(400);
    $response['message'] = $e->getMessage();

    $response['message'] = preg_replace([
        '/^script.*:/i',
        '/sudo: /i',
        '/\\d+:\\s*/'
    ], '', $response['message']);

    $response['message'] = trim($response['message'], " \t\n\r\0\x0B:");
}

echo json_encode($response);
?>